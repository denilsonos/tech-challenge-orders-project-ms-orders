import { FakeQueueServiceAdapter } from "../../../adapters/external-services/fake-queue-service/fake-queue-service-adapter";
import { PreparationClient } from "../../../adapters/external-services/preparation-client/preparation-client";
import { PreparationClientAdapter } from "../../../adapters/gateways/preparation-client-adapter";
import { OrderRepositoryImpl } from "../../../adapters/repositories/order-repository";
import { ItemDAO } from "../../../base/dao/item";
import { OrderDAO } from "../../../base/dao/order";
import { ItemDTO } from "../../../base/dto/item";
import { OrderDTO } from "../../../base/dto/order";
import { DbConnectionImpl } from "../../../frameworks/database/db-connection-impl";
import { OrderStatus } from "../../entities/enums/order-status";
import { OrderUseCaseImpl } from "./order-use-case";

jest.mock('typeorm', () => {
    return {
        Entity: () => jest.fn(),
        PrimaryGeneratedColumn: () => jest.fn(),
        Column: () => jest.fn(),
        CreateDateColumn: () => jest.fn(),
        UpdateDateColumn: () => jest.fn(),
        ManyToMany: () => jest.fn(),
        JoinTable: () => jest.fn(),
        OneToOne: () => jest.fn(),
        JoinColumn: () => jest.fn(),
    }
});

jest.mock('../../../frameworks/database/db-connection-impl', () => {
    return {
        DbConnectionImpl: jest.fn().mockImplementation(() => {
            return {
                getConnection: jest.fn().mockReturnValue({
                    getRepository: jest.fn().mockReturnValue({
                        findOneBy: jest.fn().mockResolvedValue(new OrderDAO()),
                        save: jest.fn().mockResolvedValue(new OrderDAO()),
                        delete: jest.fn().mockReturnThis(),
                        update: jest.fn().mockReturnThis(),
                        findOne: jest.fn().mockReturnThis(),
                    })
                })
            }
        })
    }
});

describe('OrderUseCase', () => {

    let database: DbConnectionImpl;
    let orderUseCase: OrderUseCaseImpl;
    let orderRepository: OrderRepositoryImpl;
    let queueService: FakeQueueServiceAdapter;
    let preparationClient: PreparationClientAdapter;

    beforeAll(() => {
        database = new DbConnectionImpl();
        preparationClient = new PreparationClient();
        orderRepository = new OrderRepositoryImpl(database);
        queueService = new FakeQueueServiceAdapter(database)
        orderUseCase = new OrderUseCaseImpl(orderRepository, queueService, preparationClient);
    });

    beforeEach(() => {
        jest.clearAllMocks();
    });

    it('should create order', async () => {
        // Arrange
        const itemDTO = new ItemDTO(
            'X Bacon',
            'A hamburger is a sandwich made of a grilled or fried patty of ground meat, usually beef, served in a bun or roll.',
            'snack',
            15,
            1,
            Buffer.from('')
        );

        const orderDTO = new OrderDTO(
            OrderStatus.Created,
            1,
            new Date(),
            new Date(),
            [itemDTO],
        );

        const itemDAO = new ItemDAO();
        itemDAO.name = itemDTO.name;
        itemDAO.description = itemDTO.description;
        itemDAO.category = itemDTO.category;
        itemDAO.value = itemDTO.value;
        itemDAO.image = itemDTO.image!;
        itemDAO.quantity = itemDTO.quantity;

        const orderDAO = new OrderDAO();
        orderDAO.items = [itemDAO];

        jest.spyOn(orderRepository, 'save').mockResolvedValue(orderDAO);

        // Act
        const result = await orderUseCase.create(orderDTO);

        // Assert
        expect(orderRepository.save).toHaveBeenCalledTimes(1)
        expect(result).toEqual(OrderDAO.daoToEntity(orderDAO));

    });

    it('should get all orders', async () => {
        // Arrange
        const itemDTO = new ItemDTO(
            'X Bacon',
            'A hamburger is a sandwich made of a grilled or fried patty of ground meat, usually beef, served in a bun or roll.',
            'snack',
            15,
            1,
            Buffer.from('')
        );

        const itemDAO = new ItemDAO();
        itemDAO.name = itemDTO.name;
        itemDAO.description = itemDTO.description;
        itemDAO.category = itemDTO.category;
        itemDAO.value = itemDTO.value;
        itemDAO.image = itemDTO.image!;
        itemDAO.quantity = itemDTO.quantity;

        const orderDAO = new OrderDAO();
        orderDAO.items = [itemDAO];

        jest.spyOn(orderRepository, 'getAll').mockResolvedValue([orderDAO]);
        jest.spyOn(orderRepository, 'findByParams').mockResolvedValue([orderDAO]);

        // Act
        const result = await orderUseCase.findByParams();

        // Assert
        expect(orderRepository.getAll).toHaveBeenCalledTimes(1);
        expect(orderRepository.findByParams).toHaveBeenCalledTimes(0);
        expect(result).toEqual([OrderDAO.daoToEntity(orderDAO)]);
    });

    it('should get order by params', async () => {
        // Arrange
        const itemDTO = new ItemDTO(
            'X Bacon',
            'A hamburger is a sandwich made of a grilled or fried patty of ground meat, usually beef, served in a bun or roll.',
            'snack',
            15,
            1,
            Buffer.from('')
        );

        const itemDAO = new ItemDAO();
        itemDAO.name = itemDTO.name;
        itemDAO.description = itemDTO.description;
        itemDAO.category = itemDTO.category;
        itemDAO.value = itemDTO.value;
        itemDAO.image = itemDTO.image!;
        itemDAO.quantity = itemDTO.quantity;

        const orderDAO = new OrderDAO();
        orderDAO.items = [itemDAO];

        jest.spyOn(orderRepository, 'getAll').mockResolvedValue([orderDAO]);
        jest.spyOn(orderRepository, 'findByParams').mockResolvedValue([orderDAO]);

        // Act
        const result = await orderUseCase.findByParams(1, OrderStatus.Created);

        // Assert
        expect(orderRepository.getAll).toHaveBeenCalledTimes(0);
        expect(orderRepository.findByParams).toHaveBeenCalledTimes(1);
        expect(result).toEqual([OrderDAO.daoToEntity(orderDAO)]);
    });

    it('should get order by id', async () => {
        // Arrange
        const itemDTO = new ItemDTO(
            'X Bacon',
            'A hamburger is a sandwich made of a grilled or fried patty of ground meat, usually beef, served in a bun or roll.',
            'snack',
            15,
            1,
            Buffer.from('')
        );

        const itemDAO = new ItemDAO();
        itemDAO.name = itemDTO.name;
        itemDAO.description = itemDTO.description;
        itemDAO.category = itemDTO.category;
        itemDAO.value = itemDTO.value;
        itemDAO.image = itemDTO.image!;
        itemDAO.quantity = itemDTO.quantity;

        const orderDAO = new OrderDAO();
        orderDAO.id = 1;
        orderDAO.items = [itemDAO];

        jest.spyOn(orderRepository, 'getById').mockResolvedValue(orderDAO);

        // Act
        const result = await orderUseCase.getById(1);

        // Assert
        expect(orderRepository.getById).toHaveBeenCalledTimes(1);
        expect(result).toEqual(orderDAO);
    });

    it('should fail when get order by id', async () => {
        // Arrange
        jest.spyOn(orderRepository, 'getById').mockResolvedValue(new OrderDAO());

        // Act
        let result;
        try {
            result = await orderUseCase.getById(1);
        } catch (error) {
            // Assert
            expect(orderRepository.getById).toHaveBeenCalledTimes(1);
            expect((error as any).message).toBe('Order not found!');
        }
    });

    it('should update order', async () => {
        // Arrange
        const itemDTO = new ItemDTO(
            'X Bacon',
            'A hamburger is a sandwich made of a grilled or fried patty of ground meat, usually beef, served in a bun or roll.',
            'snack',
            15,
            1,
            Buffer.from('')
        );

        const orderDTO = new OrderDTO(
            OrderStatus.Created,
            1,
            new Date(),
            new Date(),
            [itemDTO],
        );

        const itemDAO = new ItemDAO();
        itemDAO.name = itemDTO.name;
        itemDAO.description = itemDTO.description;
        itemDAO.category = itemDTO.category;
        itemDAO.value = itemDTO.value;
        itemDAO.image = itemDTO.image!;
        itemDAO.quantity = itemDTO.quantity;

        const orderDAO = new OrderDAO();
        orderDAO.items = [itemDAO];

        jest.spyOn(orderRepository, 'update').mockReturnThis();

        // Act
        await orderUseCase.update(orderDTO, OrderStatus.InPreparation);

        // Assert
        expect(orderRepository.update).toHaveBeenCalledTimes(1)
    });
});
